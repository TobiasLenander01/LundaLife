import os
import psycopg2
from dotenv import load_dotenv

# Load environment variables from .env
load_dotenv()

# Database connection URL
DATABASE_URL = os.getenv("DATABASE_URL")

# Check if DATABASE_URL is set
if DATABASE_URL is None:
    print("DATABASE_URL is not set in the environment variables.")
    exit(1)

# Helper to load SQL queries from files
def __load_query(query_name):
    # Construct path relative to this file
    path = os.path.join(os.path.dirname(__file__), "queries", f"{query_name}.sql")
    try:
        with open(path, "r") as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: SQL query file not found at {path}")
        raise
    except Exception as e:
        print(f"Error reading SQL query file {path}: {e}")
        raise

# Load queries once when module is imported
UPSERT_EVENT_QUERY = __load_query("upsert_event")
UPSERT_TICKET_QUERY = __load_query("upsert_ticket")

def add_event(event_details):
    """
    Adds or updates an event in the database and returns its primary key (id).
    Returns None if operation fails.
    """
    
    # Reset variables
    conn = None
    cursor = None
    db_event_id = None
    
    try:
        # Connect to the database
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Define the SQL query to upsert an event
        upsert_query = """
        INSERT INTO events (id, organization_id, organization_name, name, description, address, image, start_date, end_date, link)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (id) DO UPDATE SET
            organization_id = EXCLUDED.organization_id,
            organization_name = EXCLUDED.organization_name,
            name = EXCLUDED.name,
            description = EXCLUDED.description,
            address = EXCLUDED.address,
            image = EXCLUDED.image,
            start_date = EXCLUDED.start_date,
            end_date = EXCLUDED.end_date,
            link = EXCLUDED.link
        RETURNING id;
        """
        
        # Execute the query with the event details
        cursor.execute(upsert_query, (
            event_details["id"],
            event_details["organization_id"],
            event_details["organization_name"],
            event_details["name"],
            event_details["description"],
            event_details["address"],
            event_details["image"],
            event_details["start_date"],
            event_details["end_date"],
            event_details["link"]
        ))

        # Get the event_id that was generated by the database
        db_event_id = cursor.fetchone()[0]
        
        # Commit the transaction
        conn.commit()
        
        # Print info about the event
        print(f"DATABASE Processed event: '{event_details['name']}' with DB ID: {db_event_id}")
        
        # Return the auto-generated primary key (id)
        return db_event_id

    except Exception as e:
        # Print error message
        print(f"DATABASE Error processing event {e}")
        
        # If an error occurs, rollback the transaction
        if conn:
            conn.rollback() # Rollback on error
            
        # Return None on failure
        return None
    finally:
        # Close the cursor and connection
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def add_ticket(db_event_id, ticket_info):
    """
    Adds or updates a ticket to the database for a given event.
    """
    
    # Reset variables
    conn = None
    cursor = None
    
    try:
        # Connect to the database
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        # Define the SQL query to upsert a ticket
        upsert_query = """
        INSERT INTO tickets (event_id, name, price, active, count, max_count_per_person)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (event_id, name) DO UPDATE SET
            price = EXCLUDED.price,
            active = EXCLUDED.active,
            count = EXCLUDED.count,
            max_count_per_person = EXCLUDED.max_count_per_person
        RETURNING id; 
        """
        
        # Execute the query with the ticket details
        cursor.execute(upsert_query, (
            db_event_id, # This is the foreign key to the events table
            ticket_info.get("name"),
            ticket_info.get("price"),
            ticket_info.get("active"),
            ticket_info.get("ticket_count"),
            ticket_info.get("max_count_per_person")
        ))

        # Commit the transaction
        conn.commit()
        
        # Print info about the ticket
        print(f"DATABASE Processed ticket: '{ticket_info.get('name')}' for event ID {db_event_id}")

    except Exception as e:
        # Print error message
        print(f"DATABASE Error processing ticket '{ticket_info.get('name')}': {e}")
        
        # If an error occurs, rollback the transaction
        if conn:
            conn.rollback()
    finally:
        # Close the cursor and connection
        if cursor:
            cursor.close()
        if conn:
            conn.close()