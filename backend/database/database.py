import os
import psycopg2
from dotenv import load_dotenv

# Load environment variables from .env
load_dotenv()

# Database connection URL
DATABASE_URL = os.getenv("DATABASE_URL")

# Check if DATABASE_URL is set
if not DATABASE_URL:
    print("DATABASE_URL is not set in the environment variables.")
    exit(1)

# Helper to load SQL queries from files
def __load_query(query_name):
    # Construct path relative to this file
    path = os.path.join(os.path.dirname(__file__), "queries", f"{query_name}.sql")
    try:
        with open(path, "r") as f:
            return f.read()
    except FileNotFoundError:
        print(f"Error: SQL query file not found at {path}")
        raise
    except Exception as e:
        print(f"Error reading SQL query file {path}: {e}")
        raise

# Load queries once when module is imported
UPSERT_EVENT_QUERY = __load_query("upsert_event")
UPSERT_TICKET_QUERY = __load_query("upsert_ticket")
UPSERT_ORGANIZATION_QUERY = __load_query("upsert_organization")
GET_ORGANIZATIONS_QUERY = __load_query("get_organizations")

def upsert_event(event):
    """
    Adds or updates an event in the database and returns its primary key (id).
    Returns None if operation fails.
    """
    
    # Reset variables
    conn = None
    cursor = None
    db_event_id = None
    
    try:
        # Connect to the database
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Execute the query with the event details
        cursor.execute(UPSERT_EVENT_QUERY, (
            event["organization_id"],
            event["name"],
            event["description"],
            event["address"],
            event["latitude"],
            event["longitude"],
            event["image"],
            event["start_date"],
            event["end_date"],
            event["link"]
        ))

        # Get the event_id that was generated by the database
        db_event_id = cursor.fetchone()[0]
        
        # Commit the transaction
        conn.commit()
        
        # Print info about the event
        print(f"DATABASE Processed event: '{event['name']}' with DB ID: {db_event_id}")
        
        # Return the auto-generated primary key (id)
        return db_event_id

    except Exception as e:
        # Print error message
        print(f"DATABASE Error processing event {e}")
        
        # If an error occurs, rollback the transaction
        if conn:
            conn.rollback() # Rollback on error
            
        # Return None on failure
        return None
    finally:
        # Close the cursor and connection
        if cursor:
            cursor.close()
        if conn:
            conn.close()

def upsert_ticket(db_event_id, ticket):
    """
    Adds or updates a ticket to the database for a given event.
    """
    
    # Reset variables
    conn = None
    cursor = None
    
    try:
        # Connect to the database
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Execute the query with the ticket details
        cursor.execute(UPSERT_TICKET_QUERY, (
            db_event_id, # This is the foreign key to the events table
            ticket.get("name"),
            ticket.get("price"),
            ticket.get("active"),
            ticket.get("count"),
            ticket.get("max_count_per_person")
        ))

        # Commit the transaction
        conn.commit()
        
        # Print info about the ticket
        print(f"DATABASE Processed ticket: '{ticket.get('name')}' for event ID {db_event_id}")

    except Exception as e:
        # Print error message
        print(f"DATABASE Error processing ticket '{ticket.get('name')}': {e}")
        
        # If an error occurs, rollback the transaction
        if conn:
            conn.rollback()
    finally:
        # Close the cursor and connection
        if cursor:
            cursor.close()
        if conn:
            conn.close()
            
def upsert_organization(organization):
    """
    Adds or updates an organization in the database and returns its primary key (id).
    Returns None if operation fails.
    """
    conn = None
    cursor = None
    db_org_id = None

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        cursor.execute(UPSERT_ORGANIZATION_QUERY, (
            organization["name"],
            organization["address"],
            organization["latitude"],
            organization["longitude"],
            organization.get("stuk_id"),
            organization.get("fb_id")
        ))

        db_org_id = cursor.fetchone()[0]
        conn.commit()

        print(f"DATABASE Processed organization: '{organization['name']}' with DB ID: {db_org_id}")
        return db_org_id

    except Exception as e:
        print(f"DATABASE Error processing organization: {e}")
        if conn:
            conn.rollback()
        return None
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
            
def get_all_organizations():
    """
    Returns a list of all organizations from the database.
    """
    conn = None
    cursor = None
    organizations = []

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()

        cursor.execute(GET_ORGANIZATIONS_QUERY)
        rows = cursor.fetchall()

        for row in rows:
            org = {
                "id": row[0],
                "name": row[1],
                "address": row[2],
                "latitude": row[3],
                "longitude": row[4],
                "stuk_id": row[5],
                "fb_id": row[6]
            }
            organizations.append(org)

        return organizations

    except Exception as e:
        print(f"DATABASE Error fetching organizations: {e}")
        return []
    finally:
        if cursor:
            cursor.close()
        if conn:
            conn.close()
